local Earthshakerextension = {} Log.Write("Loaded script: EarthshakercomboEul.lua") Earthshakerextension.optionComboKey = Menu.AddKeyOption({ "MrGarabato", "Select Hero" }, "Eul Combo Key", Enum.ButtonCode.BUTTON_CODE_NONE) Menu.AddOptionIcon(Earthshakerextension.optionComboKey , "panorama/images/icon_treasure_arrow_psd.vtex_c") Earthshakerextension.optionAttack = Menu.AddOptionBool({ "MrGarabato", "Select Hero" }, "Attack after combo", true)    function Earthshakerextension.OnUpdate()     if not Menu.IsEnabled(MrGarabato_v1_MenuHx.optionEnable) then return true end     if not Menu.IsEnabled(MrGarabato_v1_MenuHx.EnableHero) then return end     Earthshakerextension.Hero = Heroes.GetLocal() 	if not Earthshakerextension.Hero or NPC.GetUnitName(Earthshakerextension.Hero) ~= "npc_dota_hero_earthshaker" then return end 	 	Earthshakerextension.Mana = NPC.GetMana(Earthshakerextension.Hero)  			 	Earthshakerextension.Slave = NPC.GetAbility(Earthshakerextension.Hero, "earthshaker_fissure") 	Earthshakerextension.Strike = NPC.GetAbility(Earthshakerextension.Hero, "earthshaker_enchant_totem") 	Earthshakerextension.Laguna = NPC.GetAbility(Earthshakerextension.Hero, "earthshaker_echo_slam")  	Earthshakerextension.Eul = NPC.GetItem(Earthshakerextension.Hero, "item_cyclone") 	if not Earthshakerextension.Eul then Earthshakerextension.Eul = nil end  	if Menu.IsKeyDown( Earthshakerextension.optionComboKey ) then 		local enemy = Input.GetNearestHeroToCursor(Entity.GetTeamNum(Earthshakerextension.Hero), Enum.TeamType.TEAM_ENEMY) 		if enemy and not Entity.IsDormant(enemy) and not NPC.IsIllusion(enemy) and Entity.GetHealth(enemy) > 0 then 			Earthshakerextension.LockTarget(enemy) 			if Earthshakerextension.Target == nil then return end 	  			local pos = Entity.GetAbsOrigin( Earthshakerextension.Target ) 	  			if Earthshakerextension.Eul and Earthshakerextension.heroCanCast( Earthshakerextension.Hero ) and Ability.IsCastable( Earthshakerextension.Eul, Earthshakerextension.Mana ) and Ability.IsReady(Earthshakerextension.Eul) then 				Ability.CastTarget(Earthshakerextension.Eul, Earthshakerextension.Target, false) 				Earthshakerextension.CastTime = os.clock() + 2.5 			end 			 			if NPC.HasModifier(Earthshakerextension.Target, "modifier_eul_cyclone") then 				local castStrike = NPC.GetTimeToFacePosition(Earthshakerextension.Hero, pos) + (Ability.GetCastPoint(Earthshakerextension.Strike) + -0.15) + NetChannel.GetAvgLatency(Enum.Flow.FLOW_OUTGOING) 				local cycloneDieTime = Modifier.GetDieTime(NPC.GetModifier(Earthshakerextension.Target, "modifier_eul_cyclone"))  				if Ability.IsReady( Earthshakerextension.Strike ) and Ability.IsCastable( Earthshakerextension.Strike, Earthshakerextension.Mana ) and cycloneDieTime - GameRules.GetGameTime() <= castStrike then 					Ability.CastNoTarget(Earthshakerextension.Strike, pos, true) 				end  				local castSlave = NPC.GetTimeToFacePosition(Earthshakerextension.Hero, pos) + (Ability.GetCastPoint(Earthshakerextension.Slave) + -0.6) + NetChannel.GetAvgLatency(Enum.Flow.FLOW_OUTGOING) 				 				if Ability.IsCastable( Earthshakerextension.Slave, Earthshakerextension.Mana ) and Ability.IsReady( Earthshakerextension.Slave ) and cycloneDieTime - GameRules.GetGameTime() <= castSlave then 					Ability.CastPosition(Earthshakerextension.Slave, pos, true) 				end 			end 			 			if Earthshakerextension.CastTime <= os.clock() then 				if Earthshakerextension.Slave and Ability.IsCastable( Earthshakerextension.Slave, Earthshakerextension.Mana ) and Ability.IsReady( Earthshakerextension.Slave ) then 					local slavePred = Ability.GetCastPoint(Earthshakerextension.Slave) + (pos:__sub(Entity.GetAbsOrigin(Earthshakerextension.Hero)):Length2D() / 1200) + (NetChannel.GetAvgLatency(Enum.Flow.FLOW_OUTGOING) * 2) 					Ability.CastPosition(Earthshakerextension.Slave, Earthshakerextension.castPred(Earthshakerextension.Target, slavePred, "line")) 				end 				 				if NPC.HasState(Earthshakerextension.Target, Enum.ModifierState.MODIFIER_STATE_INVULNERABLE) or not Menu.IsEnabled( Earthshakerextension.optionAttack ) then return end 					Player.AttackTarget(Players.GetLocal(), Earthshakerextension.Hero, Earthshakerextension.Target) 			end 		end 	else 		Earthshakerextension.Target = nil 	end end    function Earthshakerextension.LockTarget(enemy) 	if Earthshakerextension.Target == nil and enemy then 		Earthshakerextension.Target = enemy 		return 	end  	if Earthshakerextension.Target ~= nil then 		if not Entity.IsAlive(Earthshakerextension.Target) then 			Earthshakerextension.Target = nil 			return 		elseif Entity.IsDormant(Earthshakerextension.Target) then 			Earthshakerextension.Target = nil 			return 		end 	end 	return end    function Earthshakerextension.castPred(enemy, adjustmentVariable, castType) 	if not enemy or not adjustmentVariable then return end  	local enemyRotation = Entity.GetRotation(enemy):GetVectors() 		enemyRotation:SetZ(0) 	local enemyOrigin = Entity.GetAbsOrigin(enemy) 		enemyOrigin:SetZ(0)  	if enemyRotation and enemyOrigin then 		if not NPC.IsRunning(enemy) then 			return enemyOrigin 		else 			if castType == "pos" then 				local cosGamma = (Entity.GetAbsOrigin(Earthshakerextension.Hero) - enemyOrigin):Dot2D(enemyRotation:Scaled(100)) / ((Entity.GetAbsOrigin(Earthshakerextension.Hero) - enemyOrigin):Length2D() * enemyRotation:Scaled(100):Length2D()) 				return enemyOrigin:__add(enemyRotation:Normalized():Scaled(Earthshakerextension.GetMoveSpeed(enemy) * adjustmentVariable * (1 - cosGamma))) 			elseif castType == "line" then 				return enemyOrigin:__add(enemyRotation:Normalized():Scaled(Earthshakerextension.GetMoveSpeed(enemy) * adjustmentVariable)) 			end 		end 	end end  function Earthshakerextension.GetMoveSpeed(enemy) 	if not enemy then return end  	local base_speed = NPC.GetBaseSpeed(enemy) 	local bonus_speed = NPC.GetMoveSpeed(enemy) - NPC.GetBaseSpeed(enemy) 	local modifierHex 	     local modSheep = NPC.GetModifier(enemy, "modifier_sheepstick_debuff")     local modLionVoodoo = NPC.GetModifier(enemy, "modifier_lion_voodoo")     local modShamanVoodoo = NPC.GetModifier(enemy, "modifier_shadow_shaman_voodoo")  	if modSheep then 		modifierHex = modSheep 	end 	if modLionVoodoo then 		modifierHex = modLionVoodoo 	end 	if modShamanVoodoo then 		modifierHex = modShamanVoodoo 	end  	if modifierHex then 		if math.max(Modifier.GetDieTime(modifierHex) - GameRules.GetGameTime(), 0) > 0 then 			return 140 + bonus_speed 		end 	end      	if NPC.HasModifier(enemy, "modifier_invoker_ice_wall_slow_debuff") then  		return 100  	end  	if NPC.HasModifier(enemy, "modifier_invoker_cold_snap_freeze") or NPC.HasModifier(enemy, "modifier_invoker_cold_snap") then 		return (base_speed + bonus_speed) * 0.5 	end  	if NPC.HasModifier(enemy, "modifier_spirit_breaker_charge_of_darkness") then 		local chargeAbility = NPC.GetAbility(enemy, "spirit_breaker_charge_of_darkness") 		if chargeAbility then 			local specialAbility = NPC.GetAbility(enemy, "special_bonus_unique_spirit_breaker_2") 			if specialAbility then 				 if Ability.GetLevel(specialAbility) < 1 then 					return Ability.GetLevel(chargeAbility) * 50 + 550 				else 					return Ability.GetLevel(chargeAbility) * 50 + 1050 				end 			end 		end 	end 	     return base_speed + bonus_speed end  function Earthshakerextension.heroCanCast(Hero) 	if not Hero then return false end 	if not Entity.IsAlive(Hero) then return false end  	if NPC.IsStunned(Hero) then return false end 	if NPC.HasModifier(Hero, "modifier_bashed") then return false end 	if NPC.HasState(Hero, Enum.ModifierState.MODIFIER_STATE_INVULNERABLE) then return false end	 	if NPC.HasModifier(Hero, "modifier_obsidian_destroyer_astral_imprisonment_prison") then return false end 	if NPC.HasModifier(Hero, "modifier_shadow_demon_disruption") then return false end	 	if NPC.HasModifier(Hero, "modifier_invoker_tornado") then return false end 	if NPC.HasState(Hero, Enum.ModifierState.MODIFIER_STATE_HEXED) then return false end 	if NPC.HasModifier(Hero, "modifier_legion_commander_duel") then return false end 	if NPC.HasModifier(Hero, "modifier_axe_berserkers_call") then return false end 	if NPC.HasModifier(Hero, "modifier_winter_wyvern_winters_curse") then return false end 	if NPC.HasModifier(Hero, "modifier_bane_fiends_grip") then return false end 	if NPC.HasModifier(Hero, "modifier_bane_nightmare") then return false end 	if NPC.HasModifier(Hero, "modifier_faceless_void_chronosphere_freeze") then return false end 	if NPC.HasModifier(Hero, "modifier_enigma_black_hole_pull") then return false end 	if NPC.HasModifier(Hero, "modifier_magnataur_reverse_polarity") then return false end 	if NPC.HasModifier(Hero, "modifier_pudge_dismember") then return false end 	if NPC.HasModifier(Hero, "modifier_shadow_shaman_shackles") then return false end 	if NPC.HasModifier(Hero, "modifier_techies_stasis_trap_stunned") then return false end 	if NPC.HasModifier(Hero, "modifier_storm_spirit_electric_vortex_pull") then return false end 	if NPC.HasModifier(Hero, "modifier_tidehunter_ravage") then return false end 	if NPC.HasModifier(Hero, "modifier_windrunner_shackle_shot") then return false end 	if NPC.HasModifier(Hero, "modifier_item_nullifier_mute") then return false end 	 	if NPC.IsChannellingAbility(Earthshakerextension.Hero) then return false end 	if NPC.HasModifier(Earthshakerextension.Hero, "modifier_teleporting") then return false end 	 	return true  end     function Earthshakerextension.init() 	Earthshakerextension.Hero = nil 	Earthshakerextension.Mana = nil  	Earthshakerextension.Target = nil 	 	Earthshakerextension.Slave = nil 	Earthshakerextension.Strike = nil 	Earthshakerextension.Laguna = nil 	 	Earthshakerextension.Eul = nil 	Earthshakerextension.CastTime = 0 	Earthshakerextension.Thanks = false end  function Earthshakerextension.OnGameStart() 	Earthshakerextension.init() end  function Earthshakerextension.OnGameEnd() 	Earthshakerextension.init() end  Earthshakerextension.init()   return Earthshakerextension 