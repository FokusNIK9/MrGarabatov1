MrGarabato_v1_attackHandler = {}  MrGarabato_v1_attackHandler.actionTable = {} MrGarabato_v1_attackHandler.mainTick = 0  function MrGarabato_v1_attackHandler.resetter()  	local keys = { 		MrGarabato_v1_MenuHx.optionComboKey, 		MrGarabato_v1_MenuHx.optionLastHitKey, 		MrGarabato_v1_MenuHx.optionHeroMagnusSkewerComboKey, 		MrGarabato_v1_MenuHx.optionHeroMagnuscomboKeyAltSkewer, 		MrGarabato_v1_MenuHx.optionHeroMagnuscomboKeyAltRP, 		MrGarabato_v1_MenuHx.optionHeroHuskarHarassKey, 		MrGarabato_v1_MenuHx.optionHeroTimberPanicKey, 		MrGarabato_v1_MenuHx.optionHeroTimberFastMoveKey, 		MrGarabato_v1_MenuHx.optionHeroKunkkaShipKey, 		MrGarabato_v1_MenuHx.optionHeroPudgeHookKey, 		MrGarabato_v1_MenuHx.optionHeroTAHarassKey, 		MrGarabato_v1_MenuHx.optionHeroClinkzHarassKey, 		MrGarabato_v1_MenuHx.optionArcWardenTempestKey, 		MrGarabato_v1_MenuHx.optionArcWardenPushKey, 		MrGarabato_v1_MenuHx.optionHeroSFEulCombo, 		MrGarabato_v1_MenuHx.optionHeroViperHarassKey, 		MrGarabato_v1_MenuHx.optionHeroDrowHarassKey, 		MrGarabato_v1_MenuHx.optionHeroSkyHarassKey, 		MrGarabato_v1_MenuHx.optionHeroSilencerHarassKey, 		MrGarabato_v1_MenuHx.optionHeroVisageInstStunKey, 		MrGarabato_v1_MenuHx.optionHeroVisagePanicKey, 		MrGarabato_v1_MenuHx.optionHeroPuckPanicKey, 		MrGarabato_v1_MenuHx.optionHeroInvokerIcewallKey, 		MrGarabato_v1_MenuHx.optionHeroInvokerAlacrityKey, 		MrGarabato_v1_MenuHx.optionHeroInvokerTornadoKey, 		MrGarabato_v1_MenuHx.optionHeroZuusFarmKey, 		MrGarabato_v1_MenuHx.optionHeroZuusHarassKey, 		MrGarabato_v1_MenuHx.optionHeroCMUltKey, 		MrGarabato_v1_MenuHx.optionHeroTinkerPushKey, 		MrGarabato_v1_MenuHx.optionHeroTinkerRocketKey, 		MrGarabato_v1_MenuHx.optionHeroDisruptorGlimpseComboKey, 		MrGarabato_v1_MenuHx.optionHeroDisruptorUltComboKey 			}  	local check = false  	for _, v in ipairs(keys) do 		if Menu.IsKeyDown(v) then 			check = true 		end 	end  	if not check then 		if next(MrGarabato_v1_attackHandler.actionTable) ~= nil then 			MrGarabato_v1_attackHandler.actionTable = {} 			MrGarabato_v1_attackHandler.mainTick = 0 		end 	end  end  function MrGarabato_v1_attackHandler.actionTracker(source, time, order, target, delay)  	if not source then return false end 	if not time then return false end 	if not order then return false end 	if not target then return false end  	local timing = delay 		if timing == nil then 			timing = 0 		end  	if os.clock() < MrGarabato_v1_attackHandler.mainTick + timing then 		return false 	end  	if MrGarabato_v1_attackHandler.actionTable[Entity.GetIndex(source)] == nil then return true end  	local index = Entity.GetIndex(source)  	local lastTime = MrGarabato_v1_attackHandler.actionTable[index]["time"] 	local lastOrder = MrGarabato_v1_attackHandler.actionTable[index]["order"] 	local lastTarget = MrGarabato_v1_attackHandler.actionTable[index]["target"]  	if os.clock() < lastTime + timing then 		return false 	end  	if order == "attack" then 		if lastOrder == order and lastTarget == target then 			return false 		end 	end  	if order == "attack move" then 		if lastOrder == order then 			if target ~= nil then 				if (target - lastTarget):Length2D() < 70 then 					return false 				end 			end 		end 	end  	if order == "move" then 		if lastOrder == order then 			if target ~= nil then 				if (target - lastTarget):Length2D() < 70 then 					return false 				end 			end 		end 	end  	return true  end  function MrGarabato_v1_attackHandler.createActionTable(npc)  	if not npc then return end  	if MrGarabato_v1_attackHandler.actionTable[Entity.GetIndex(npc)] == nil then 		MrGarabato_v1_attackHandler.actionTable[Entity.GetIndex(npc)] = { time = 0, order = nil, target = nil, recurring = 0 } 	end  	if MrGarabato_v1_attackHandler.actionTable[Entity.GetIndex(npc)]["order"] == "attack" then 		if MrGarabato_v1_orbwalker.orbwalkerInAttackAnimation() == true then 			MrGarabato_v1_attackHandler.actionTable[Entity.GetIndex(npc)]["recurring"] = os.clock() 		end  		if MrGarabato_v1_orbwalker.orbwalkerIsInAttackBackswing(npc) == true then 			MrGarabato_v1_attackHandler.actionTable[Entity.GetIndex(npc)]["recurring"] = os.clock() 		end 	end  	if not NPC.IsRunning(npc) and not NPC.IsTurning(npc) then 		if os.clock() > MrGarabato_v1_attackHandler.actionTable[Entity.GetIndex(npc)]["recurring"] + 0.15 then 			MrGarabato_v1_attackHandler.actionTable[Entity.GetIndex(npc)] = { time = 0, order = nil, target = nil, recurring = 0 } 		end 	end	  	if MrGarabato_v1_utility_functions.inSkillAnimation(npc) == true then 		MrGarabato_v1_attackHandler.actionTable[Entity.GetIndex(npc)] = { time = 0, order = nil, target = nil, recurring = 0 } 	end 			 	return  end  function MrGarabato_v1_attackHandler.GenericMainAttack(npc, attackType, target, position) 	 	if not npc then return end 	if not target and not position then return end  	MrGarabato_v1_attackHandler.createActionTable(npc)  	if MrGarabato_v1_utility_functions.isHeroChannelling(npc) == true then return end 	if MrGarabato_v1_utility_functions.heroCanCastItems(npc) == false then return end 	if MrGarabato_v1_utility_functions.inSkillAnimation(npc) == true then return end   	MrGarabato_v1_attackHandler.GenericAttackIssuer(attackType, target, position, npc)   end  function MrGarabato_v1_attackHandler.GenericAttackIssuer(attackType, target, position, npc)  	if not npc then return end 	if not target and not position then return end  	if attackType == "Enum.UnitOrder.DOTA_UNIT_ORDER_ATTACK_TARGET" then 		if MrGarabato_v1_attackHandler.actionTracker(npc, os.clock(), "attack", target, 0.25) == true then 			Player.AttackTarget(Players.GetLocal(), npc, target, false) 			MrGarabato_v1_attackHandler.actionTable[Entity.GetIndex(npc)] = { time = os.clock(), order = "attack", target = target, recurring = os.clock() } 			MrGarabato_v1_attackHandler.mainTick = os.clock() 		end 	end  	if attackType == "Enum.UnitOrder.DOTA_UNIT_ORDER_ATTACK_MOVE" then 		if MrGarabato_v1_attackHandler.actionTracker(npc, os.clock(), "attack move", position, 0.25) == true then	 			Player.PrepareUnitOrders(Players.GetLocal(), Enum.UnitOrder.DOTA_UNIT_ORDER_ATTACK_MOVE, target, position, ability, Enum.PlayerOrderIssuer.DOTA_ORDER_ISSUER_PASSED_UNIT_ONLY, npc) 			MrGarabato_v1_attackHandler.actionTable[Entity.GetIndex(npc)] = { time = os.clock(), order = "attack move", target = position, recurring = os.clock() } 			MrGarabato_v1_attackHandler.mainTick = os.clock() 		end 	end  	if attackType == "Enum.UnitOrder.DOTA_UNIT_ORDER_MOVE_TO_POSITION" then 		if MrGarabato_v1_attackHandler.actionTracker(npc, os.clock(), "move", position, 0.125) == true then 			NPC.MoveTo(npc, position, false, true) 			MrGarabato_v1_attackHandler.actionTable[Entity.GetIndex(npc)] = { time = os.clock(), order = "move", target = position, recurring = os.clock() } 			MrGarabato_v1_attackHandler.mainTick = os.clock() 		end 	end end  return MrGarabato_v1_attackHandler