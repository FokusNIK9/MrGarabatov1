local ClinkzMrG = {} Log.Write("Loaded script: Clinkz.lua") Menu.AddMenuIcon({"MrGarabato", " Выбрать героя" }, "panorama/images/heroes/icons/npc_dota_hero_clinkz_png.vtex_c") ClinkzMrG.optionTarget = Menu.AddOptionSlider({"MrGarabato", " Выбрать героя" }, "Target Radius", 200, 1000, 500) ClinkzMrG.optionClinkzTargetStyle = Menu.AddOptionCombo({"MrGarabato", " Выбрать героя" }, "Target Style", {"Free Target", "Lock Target"}, 1) Menu.AddMenuIcon({"MrGarabato", " Выбрать героя" , "Skill"}, "panorama/images/icon_plus_white_png.vtex_c") ClinkzMrG.optionSkil1 = Menu.AddOptionBool({"MrGarabato", " Выбрать героя" , "Skill"}, "Strafe", false) Menu.AddOptionIcon(ClinkzMrG.optionSkil1, "panorama/images/spellicons/clinkz_strafe_png.vtex_c") ClinkzMrG.optionSkil2 = Menu.AddOptionBool({"MrGarabato", " Выбрать героя" , "Skill"}, "Auto toggle Searing  Arrows", false) Menu.AddOptionIcon(ClinkzMrG.optionSkil2, "panorama/images/spellicons/clinkz_searing_arrows_png.vtex_c") Menu.AddMenuIcon({"MrGarabato", " Выбрать героя" , "Items"}, "panorama/images/icon_plus_white_png.vtex_c") ClinkzMrG.optionClinkzEnableBkb = Menu.AddOptionBool({"MrGarabato", " Выбрать героя" , "Items"}, "Black King Bar", false) Menu.AddOptionIcon(ClinkzMrG.optionClinkzEnableBkb, "panorama/images/items/black_king_bar_png.vtex_c") ClinkzMrG.optionClinkzEnableBlood = Menu.AddOptionBool({"MrGarabato", " Выбрать героя" , "Items"}, "Bloodthorn", false) Menu.AddOptionIcon(ClinkzMrG.optionClinkzEnableBlood, "panorama/images/items/bloodthorn_png.vtex_c") ClinkzMrG.optionClinkzEnableCourage = Menu.AddOptionBool({"MrGarabato", " Выбрать героя" , "Items"}, "Medallion of Courage", false) Menu.AddOptionIcon(ClinkzMrG.optionClinkzEnableCourage, "panorama/images/items/medallion_of_courage_png.vtex_c") ClinkzMrG.optionClinkzEnableDiffusal = Menu.AddOptionBool({"MrGarabato", " Выбрать героя" , "Items"}, "Diffusal Blade", false) Menu.AddOptionIcon(ClinkzMrG.optionClinkzEnableDiffusal, "panorama/images/items/diffusal_blade_png.vtex_c") ClinkzMrG.optionClinkzEnableHex = Menu.AddOptionBool({"MrGarabato", " Выбрать героя" , "Items"}, "Hex", false) Menu.AddOptionIcon(ClinkzMrG.optionClinkzEnableHex, "panorama/images/items/sheepstick_png.vtex_c") ClinkzMrG.optionClinkzEnableNullifier = Menu.AddOptionBool({"MrGarabato", " Выбрать героя" , "Items"}, "Nullifier", false) Menu.AddOptionIcon(ClinkzMrG.optionClinkzEnableNullifier, "panorama/images/items/nullifier_png.vtex_c") ClinkzMrG.optionClinkzEnableOrchid = Menu.AddOptionBool({"MrGarabato", " Выбрать героя" , "Items"}, "Orchid", false) Menu.AddOptionIcon(ClinkzMrG.optionClinkzEnableOrchid, "panorama/images/items/orchid_png.vtex_c") ClinkzMrG.optionClinkzEnableSolar = Menu.AddOptionBool({"MrGarabato", " Выбрать героя" , "Items"}, "Solar Crest", false) Menu.AddOptionIcon(ClinkzMrG.optionClinkzEnableSolar, "panorama/images/items/solar_crest_png.vtex_c") ClinkzMrG.optionClinkzEnableStack = Menu.AddOptionBool({"MrGarabato", " Выбрать героя" }, "Stack Hex/orchid+nullifier", false)  ClinkzMrG.optionEnablePoopLinken = Menu.AddOptionBool({"MrGarabato", " Выбрать героя"  ,"Poop Linken"}, "Enable", false) Menu.AddMenuIcon({"MrGarabato", " Выбрать героя"  ,"Poop Linken"}, "panorama/images/items/sphere_png.vtex_c") Menu.AddOptionIcon(ClinkzMrG.optionEnablePoopLinken, "panorama/images/items/branches_png.vtex_c") ClinkzMrG.optionEnablePoopAbyssal = Menu.AddOptionBool({"MrGarabato", " Выбрать героя"  ,"Poop Linken"}, "Abyssal Blade", false) Menu.AddOptionIcon(ClinkzMrG.optionEnablePoopAbyssal, "panorama/images/items/abyssal_blade_png.vtex_c") ClinkzMrG.optionEnablePoopBlood = Menu.AddOptionBool({"MrGarabato", " Выбрать героя"  ,"Poop Linken"}, "Bloodthorn", false) Menu.AddOptionIcon(ClinkzMrG.optionEnablePoopBlood, "panorama/images/items/bloodthorn_png.vtex_c") ClinkzMrG.optionEnablePoopDagon = Menu.AddOptionBool({"MrGarabato", " Выбрать героя"  ,"Poop Linken"}, "Dagon", false) Menu.AddOptionIcon(ClinkzMrG.optionEnablePoopDagon, "panorama/images/items/dagon_5_png.vtex_c") ClinkzMrG.optionEnablePoopDiffusal = Menu.AddOptionBool({"MrGarabato", " Выбрать героя"  ,"Poop Linken"}, "Diffusal Blade", false) Menu.AddOptionIcon(ClinkzMrG.optionEnablePoopDiffusal, "panorama/images/items/diffusal_blade_png.vtex_c") ClinkzMrG.optionEnablePoopEul = Menu.AddOptionBool({"MrGarabato", " Выбрать героя"  ,"Poop Linken"}, "Eul", false) Menu.AddOptionIcon(ClinkzMrG.optionEnablePoopEul, "panorama/images/items/cyclone_png.vtex_c") ClinkzMrG.optionEnablePoopForce = Menu.AddOptionBool({"MrGarabato", " Выбрать героя"  ,"Poop Linken"}, "Force Staff", false) Menu.AddOptionIcon(ClinkzMrG.optionEnablePoopForce, "panorama/images/items/force_staff_png.vtex_c") ClinkzMrG.optionEnablePoopHalberd = Menu.AddOptionBool({"MrGarabato", " Выбрать героя"  ,"Poop Linken"}, "Heavens Halberd", false) Menu.AddOptionIcon(ClinkzMrG.optionEnablePoopHalberd, "panorama/images/items/heavens_halberd_png.vtex_c") ClinkzMrG.optionEnablePoopHex = Menu.AddOptionBool({"MrGarabato", " Выбрать героя"  ,"Poop Linken"}, "Hex", false) Menu.AddOptionIcon(ClinkzMrG.optionEnablePoopHex, "panorama/images/items/sheepstick_png.vtex_c") ClinkzMrG.optionEnablePoopPike = Menu.AddOptionBool({"MrGarabato", " Выбрать героя"  ,"Poop Linken"}, "Hurricane Pike", false) Menu.AddOptionIcon(ClinkzMrG.optionEnablePoopPike, "panorama/images/items/hurricane_pike_png.vtex_c") ClinkzMrG.optionEnablePoopOrchid = Menu.AddOptionBool({"MrGarabato", " Выбрать героя"  ,"Poop Linken"}, "Orchid", false) Menu.AddOptionIcon(ClinkzMrG.optionEnablePoopOrchid, "panorama/images/items/orchid_png.vtex_c") local myHero, myPlayer, myTeam, myMana, myFaction, attackRange, myPos, myBase, enemyBase, enemyPosition local enemy local comboHero local q,w,e,r,f local nextTick = 0 local nextTick2 = 0 local needTime = 0 local needTime2 = 0 local needAttack local added = false local ebladeCasted = {} local x,y local urn, soulring, vessel, hex, halberd, mjolnir, bkb, nullifier, solar, courage, force, pike, eul, orchid, bloodthorn, diffusal, armlet, lotus, satanic, blademail, blink, abyssal, eblade, phase, discord, shiva, refresher, manta, silver, midas, necro, silver, branch, mom, arcane local time = 0 function ClinkzMrG.ClearVar( ... ) 	urn = nil 	vessel = nil 	hex = nil 	halberd = nil 	mjolnir = nil 	bkb = nil 	nullifier = nil 	solar = nil 	courage = nil 	force = nil 	pike = nil 	eul = nil 	orchid = nil 	bloodthorn = nil 	diffusal = nil 	armlet = nil 	lotus = nil 	satanic = nil 	blademail = nil 	blink = nil 	abyssal = nil 	discrd = nil 	phase = nil 	dagon = nil 	eblade = nil 	shiva = nil 	refresher = nil 	soulring = nil 	necro = nil 	manta = nil 	silver = nil 	branch = nil 	arcane = nil 	mom = nil end function ClinkzMrG.cloneClearVar( ... ) 	clone_hex = nil 	clone_orchid = nil 	clone_blood = nil 	clone_nullifier = nil 	clone_silver = nil 	clone_mjolnir = nil 	clone_manta = nil 	clone_midas = nil 	clone_bkb = nil 	clone_diffusal = nil 	clone_satanic = nil 	clone_necro = nil 	clone_boots = nil 	clone_silver = nil 	clone_mom = nil end function ClinkzMrG.OnUpdate( ... ) 	if not Menu.IsEnabled(MrGarabato_v1_MenuHx.optionEnable) then return true end     if not Menu.IsEnabled(MrGarabato_v1_MenuHx.EnableHero) then return end	 	myHero = Heroes.GetLocal() 	nextTick = 0 	nextTick2 = 0 	needTime = 0 	needTime2 = 0 	time = 0 	added = false 	spark_spam = nil 	if not myHero then return end 	if NPC.GetUnitName(myHero) == "npc_dota_hero_clinkz" then 		comboHero = "Clinkz" 		q = NPC.GetAbilityByIndex(myHero, 0) 		w = NPC.GetAbilityByIndex(myHero, 1) 			else	 		myHero = nil 		return	 	end 	myTeam = Entity.GetTeamNum(myHero) 	if myTeam == 2 then 		myBase = Vector(-7328.000000, -6816.000000, 512.000000) 		enemyBase = Vector(7141.750000, 6666.125000, 512.000000) 		myFaction = "radiant" 	else 		myBase = Vector(7141.750000, 6666.125000, 512.000000) 		enemyBase = Vector(-7328.000000, -6816.000000, 512.000000) 		myFaction = "dire" 	end 	myPlayer = Players.GetLocal() 	if not myHero then return end 	myMana = NPC.GetMana(myHero) 	time = GameRules.GetGameTime() 	myPos = Entity.GetAbsOrigin(myHero) 	if comboHero == "Clinkz"  then 		if Menu.IsKeyDown(MrGarabato_v1_MenuHx.optionComboKey) then 			if Menu.GetValue(ClinkzMrG.optionClinkzTargetStyle) == 1 and not enemy then 				enemy = Input.GetNearestHeroToCursor(myTeam, Enum.TeamType.TEAM_ENEMY) 			elseif Menu.GetValue(ClinkzMrG.optionClinkzTargetStyle) == 0 then 				enemy = Input.GetNearestHeroToCursor(myTeam, Enum.TeamType.TEAM_ENEMY) 			end 			if enemy and Entity.IsAlive(enemy) then 				enemyPosition = Entity.GetAbsOrigin(enemy) 				ClinkzMrG.ClinkzCombo() 			end 		else 			enemy = nil 		end 	end 			ClinkzMrG.ClearVar() 	for i = 0, 5 do 		item = NPC.GetItemByIndex(myHero, i) 		if item and item ~= 0 then 			local name = Ability.GetName(item) 			if name == "item_urn_of_shadows" then 				urn = item 			elseif name == "item_spirit_vessel" then 				vessel = item 			elseif name == "item_sheepstick" then 				hex = item 			elseif name == "item_nullifier" then 				nullifier = item 			elseif name == "item_diffusal_blade" then 				diffusal = item 			elseif name == "item_mjollnir" then 				mjolnir = item 			elseif name == "item_heavens_halberd" then 				halberd = item 			elseif name == "item_abyssal_blade" then 				abyssal = item 			elseif name == "item_armlet" then 				armlet = item 			elseif name == "item_bloodthorn" then 				bloodthorn = item 			elseif name == "item_black_king_bar" then 				bkb = item 			elseif name == "item_medallion_of_courage" then 				courage = item 			elseif name == "item_solar_crest" then 				solar = item 			elseif name == "item_blink" then 				blink = item 			elseif name == "item_blade_mail" then 				blademail = item 			elseif name == "item_orchid" then 				orchid = item 			elseif name == "item_lotus_orb" then 				lotus = item 			elseif name == "item_cyclone" then 				eul = item 			elseif name == "item_satanic" then 				satanic = item 			elseif name == "item_force_staff" then 				force = item 			elseif name == "item_hurricane_pike" then 				pike = item 			elseif name == "item_ethereal_blade" then 				eblade = item 			elseif name == "item_phase_boots" then 				phase = item 			elseif name == "item_dagon" or name == "item_dagon_2" or name == "item_dagon_3" or name == "item_dagon_4" or name == "item_dagon_5" then 				dagon = item 			elseif name == "item_veil_of_discord" then 				discord = item 			elseif name == "item_shivas_guard" then 				shiva = item 			elseif name == "item_refresher" then 				refresher = item 			elseif name == "item_soul_ring"	then 				soulring = item 			elseif name == "item_manta" then 				manta = item 			elseif name == "item_necronomicon" or name == "item_necronomicon_2" or name == "item_necronomicon_3" then 				necro = item 			elseif name == "item_silver_edge" then 				silver = item 			elseif name == "item_branches" then 				branch = item 			elseif name == "item_mask_of_madness" then 				mom = item 			elseif name == "item_arcane_boots" then 				arcane = item	 			end 		end 	end end function ClinkzMrG.ClinkzCombo( ... )     enemy = ClinkzMrG.Target(myHero) 	if attackRange ~= NPC.GetAttackRange(myHero) then 		attackRange = NPC.GetAttackRange(myHero) 	end 	if NPC.IsEntityInRange(myHero, enemy, attackRange) then 		if q and Menu.IsEnabled(ClinkzMrG.optionSkil1) and ClinkzMrG.AbilityIsCastable(q, myMana) then 			Ability.CastNoTarget(q) 			return 		end 		if not Ability.GetAutoCastState(w) and Menu.IsEnabled(ClinkzMrG.optionSkil2) and ClinkzMrG.AbilityIsCastable(w, myMana) and time >= nextTick then 			Ability.ToggleMod(w) 			nextTick = time + 0.1 + NetChannel.GetAvgLatency(Enum.Flow.FLOW_OUTGOING) 		end 		if ClinkzMrG.IsLinkensProtected(enemy) and Menu.IsEnabled(ClinkzMrG.optionEnablePoopLinken) and not NPC.HasState(enemy, Enum.ModifierState.MODIFIER_STATE_MAGIC_IMMUNE) then 			ClinkzMrG.PoopLinken() 		end 		if hex and not NPC.HasState(enemy, Enum.ModifierState.MODIFIER_STATE_HEXED) and Menu.IsEnabled(ClinkzMrG.optionClinkzEnableHex) and ClinkzMrG.ItemIsCastable(hex, myMana) and not NPC.HasState(enemy, Enum.ModifierState.MODIFIER_STATE_MAGIC_IMMUNE) then 			Ability.CastTarget(hex, enemy) 			return 		end		 		if nullifier and not NPC.HasModifier(enemy, "modifier_item_nullifier_mute") and Menu.IsEnabled(ClinkzMrG.optionClinkzEnableNullifier) and ClinkzMrG.ItemIsCastable(nullifier, myMana) and not NPC.HasState(enemy, Enum.ModifierState.MODIFIER_STATE_MAGIC_IMMUNE) then 			if NPC.GetItem(enemy, "item_aeon_disk", true) then 				if NPC.HasModifier(enemy, "modifier_item_aeon_disk_buff") and not Ability.IsReady(NPC.GetItem(enemy, "item_aeon_disk", true)) then 					Ability.CastTarget(nullifier,enemy) 				end 			else 				if NPC.HasState(enemy, Enum.ModifierState.MODIFIER_STATE_HEXED) and not Menu.IsEnabled(ClinkzMrG.optionClinkzEnableStack) then 					local modHex = NPC.GetModifier(enemy, "modifier_sheepstick_debuff") 					if not modHex then 						modHex = NPC.GetModifier(enemy, "modifier_shadow_shaman_voodoo") 					end 					if not modHex then 						modHex = NPC.GetModifier(enemy, "modifier_lion_voodoo") 					end 					if modHex then 						local dieTime = Modifier.GetDieTime(modHex) 						if dieTime - time <= (enemyPosition-myPos):Length()/750 + NetChannel.GetAvgLatency(Enum.Flow.FLOW_OUTGOING) then 							Ability.CastTarget(nullifier,enemy) 						end 					end 				else 					Ability.CastTarget(nullifier, enemy) 				end 			end 			return 		end		 		if diffusal and not NPC.HasModifier(enemy, "modifier_item_diffusal_blade_slow") and Menu.IsEnabled(ClinkzMrG.optionClinkzEnableDiffusal) and ClinkzMrG.ItemIsCastable(diffusal,0) and not NPC.HasState(enemy, Enum.ModifierState.MODIFIER_STATE_MAGIC_IMMUNE) then 			Ability.CastTarget(diffusal, enemy) 			return 		end 		if orchid and not NPC.HasModifier(enemy, "modifier_orchid_malevolence_debuff") and Menu.IsEnabled(ClinkzMrG.optionClinkzEnableOrchid) and ClinkzMrG.ItemIsCastable(orchid, myMana) and not NPC.HasState(enemy, Enum.ModifierState.MODIFIER_STATE_MAGIC_IMMUNE) then 			if Menu.IsEnabled(ClinkzMrG.optionClinkzEnableStack) and NPC.HasState(enemy, Enum.ModifierState.MODIFIER_STATE_HEXED)then 				Ability.CastTarget(orchid, enemy) 			elseif not Menu.IsEnabled(ClinkzMrG.optionClinkzEnableStack) and NPC.HasState(enemy, Enum.ModifierState.MODIFIER_STATE_HEXED) then 			 			else 				Ability.CastTarget(orchid, enemy)	 			end 			return 		end 		if bloodthorn and not NPC.HasModifier(enemy, "modifier_bloodthorn_debuff") and Menu.IsEnabled(ClinkzMrG.optionClinkzEnableBlood) and ClinkzMrG.ItemIsCastable(bloodthorn, myMana) and not NPC.HasState(enemy, Enum.ModifierState.MODIFIER_STATE_MAGIC_IMMUNE) then 			if Menu.IsEnabled(ClinkzMrG.optionClinkzEnableStack) and NPC.HasState(enemy, Enum.ModifierState.MODIFIER_STATE_HEXED) then 				Ability.CastTarget(bloodthorn, enemy) 			elseif not Menu.IsEnabled(ClinkzMrG.optionClinkzEnableStack) and NPC.HasState(enemy, Enum.ModifierState.MODIFIER_STATE_HEXED) then 			 			else 				Ability.CastTarget(bloodthorn, enemy)	 			end 			return 		end 		if courage and not NPC.HasModifier(enemy, "modifier_item_medallion_of_courage_armor_reduction") and Menu.IsEnabled(ClinkzMrG.optionClinkzEnableCourage) and ClinkzMrG.ItemIsCastable(courage, 0) then 			Ability.CastTarget(courage, enemy) 			return 		end 		if solar and not NPC.HasModifier(enemy, "modifier_item_solar_crest_armor_reduction") and Menu.IsEnabled(ClinkzMrG.optionClinkzEnableSolar) and ClinkzMrG.ItemIsCastable(solar, 0) then 			Ability.CastTarget(solar, enemy) 			return 		end 		if bkb and not NPC.HasState(myHero, Enum.ModifierState.MODIFIER_STATE_MAGIC_IMMUNE) and Menu.IsEnabled(ClinkzMrG.optionClinkzEnableBkb) and ClinkzMrG.ItemIsCastable(bkb, 0) then 			Ability.CastNoTarget(bkb) 			return 		end 	end 	Player.AttackTarget(myPlayer, myHero, enemy) end function ClinkzMrG.Target(myHero)   if not myHero then return end   enemy = Input.GetNearestHeroToCursor(Entity.GetTeamNum(myHero), Enum.TeamType.TEAM_ENEMY)   if not enemy then return end   local targetingRange = Menu.GetValue(ClinkzMrG.optionTarget)   local mousePos = Input.GetWorldCursorPos()   local enemyDist = (Entity.GetAbsOrigin(enemy) - mousePos):Length2D()   if enemyDist < targetingRange then     return enemy   else     return mousePos   end end function ClinkzMrG.IsLinkensProtected(npc) 	if NPC.IsLinkensProtected(npc) then 		return true 	end 	if NPC.GetUnitName(npc) == "npc_dota_hero_antimage" then 		if (NPC.HasItem(npc, "item_ultimate_scepter") or NPC.HasModifier(npc, "modifier_item_ultimate_scepter_consumed")) and Ability.IsReady(NPC.GetAbility(npc, "antimage_spell_shield")) and not NPC.HasModifierState(npc, Enum.ModifierState.MODIFIER_STATE_PASSIVES_DISABLED) then 			return true 		end 	end 	return false end function ClinkzMrG.PoopLinken(exception) 	if abyssal and Menu.IsEnabled(ClinkzMrG.optionEnablePoopAbyssal) and Ability.IsCastable(abyssal, myMana) then 		Ability.CastTarget(abyssal, enemy) 		return 	end 	if bloodthorn and Menu.IsEnabled(ClinkzMrG.optionEnablePoopBlood) and Ability.IsCastable(bloodthorn, myMana) then 		Ability.CastTarget(bloodthorn, enemy) 		return 	end 	if dagon and Menu.IsEnabled(ClinkzMrG.optionEnablePoopDagon) and Ability.IsCastable(dagon, myMana) then 		Ability.CastTarget(dagon, enemy) 		return 	end 	if diffusal and Menu.IsEnabled(ClinkzMrG.optionEnablePoopDiffusal) and Ability.IsCastable(diffusal, 0) then 		Ability.CastTarget(diffusal, enemy) 		return 	end 	if eul and Menu.IsEnabled(ClinkzMrG.optionEnablePoopEul) and Ability.IsCastable(eul, myMana) and eul ~= exception then 		Ability.CastTarget(eul, enemy) 		return 	end 	if force and Menu.IsEnabled(ClinkzMrG.optionEnablePoopForce) and Ability.IsCastable(force, myMana) then 		Ability.CastTarget(force, enemy) 		return 	end 	if halberd and Menu.IsEnabled(ClinkzMrG.optionEnablePoopHalberd) and Ability.IsCastable(halberd, myMana) then 		Ability.CastTarget(halberd, enemy) 		return 	end 	if hex and Menu.IsEnabled(ClinkzMrG.optionEnablePoopHex) and Ability.IsCastable(hex, myMana) then 		Ability.CastTarget(hex, enemy) 		return 	end 	if pike and Menu.IsEnabled(ClinkzMrG.optionEnablePoopPike) and Ability.IsCastable(pike, myMana) then 		Ability.CastTarget(pike, enemy) 		return 	end 	if orchid and Menu.IsEnabled(ClinkzMrG.optionEnablePoopOrchid) and Ability.IsCastable(orchid, myMana) then 		Ability.CastTarget(orchid, enemy) 		return 	end end function ClinkzMrG.AbilityIsCastable(ability, myMana) 	if not Entity.IsAlive(myHero) then return false end 	if myMana >= Ability.GetManaCost(ability) and Ability.IsReady(ability) then 		if not NPC.IsSilenced(myHero) and not NPC.IsStunned(myHero) and not NPC.HasState(myHero, Enum.ModifierState.MODIFIER_STATE_HEXED) and not NPC.HasState(myHero, Enum.ModifierState.MODIFIER_STATE_INVULNERABLE) then 			return true 		end 	end 	return false end function ClinkzMrG.ItemIsCastable(ability, myMana) 	if not Entity.IsAlive(myHero) then return false end 	if myMana >= Ability.GetManaCost(ability) and Ability.IsReady(ability) then 		if not NPC.IsStunned(myHero) and not NPC.HasState(myHero, Enum.ModifierState.MODIFIER_STATE_HEXED) and not NPC.HasState(myHero, Enum.ModifierState.MODIFIER_STATE_INVULNERABLE) and not NPC.HasModifier(myHero, "modifier_doom_bringer_doom") and not NPC.HasModifier(myHero, "modifier_item_nullifier_mute") then 			return true 		end 	end 	return false end return ClinkzMrG