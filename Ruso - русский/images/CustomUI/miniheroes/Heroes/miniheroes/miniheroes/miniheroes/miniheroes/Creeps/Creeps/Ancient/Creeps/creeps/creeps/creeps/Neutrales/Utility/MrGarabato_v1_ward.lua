MrGarabato_v1_ward = {}  Log.Write("Loaded script: DetectWard.lua") MrGarabato_v1_ward.font = Renderer.LoadFont("Tahoma", 22, Enum.FontWeight.EXTRABOLD)  MrGarabato_v1_ward.wardCaptureTiming = 0 MrGarabato_v1_ward.sentryImageHandle = nil MrGarabato_v1_ward.obsImageHandle = nil MrGarabato_v1_ward.wardDrawingRemove = 0  MrGarabato_v1_ward.wardDispenserCount = {} MrGarabato_v1_ward.wardProcessingTable = {} MrGarabato_v1_ward.NeedPosUpdate = {}  function MrGarabato_v1_ward.OnEntityDestroy(ent)  	if not Menu.IsEnabled(MrGarabato_v1_MenuHx.optionWardAwareness) then return end 	if not Menu.IsEnabled(MrGarabato_v1_MenuHx.optionWardAwarenessRemove) then return end  	if not Heroes.GetLocal() then return end 	if not Entity.IsNPC(ent) then return end 	if Entity.IsSameTeam(Heroes.GetLocal(), ent) then return end 	if NPC.GetUnitName(ent) ~= "npc_dota_sentry_wards" and NPC.GetUnitName(ent) ~= "npc_dota_observer_wards" then return end 	if next(MrGarabato_v1_ward.wardProcessingTable) ~= nil then 		for i, v in pairs(MrGarabato_v1_ward.wardProcessingTable) do 			if v then 				if (v.pos - Entity.GetAbsOrigin(ent)):Length2D() <= 500 then 					MrGarabato_v1_ward.wardProcessingTable[i] = nil 				end 			end 		end 	end  end  function MrGarabato_v1_ward.InFront( unit, distance, ... ) 	return Entity.GetAbsOrigin(unit) + Entity.GetRotation(unit):GetForward():Scaled(distance) end  function MrGarabato_v1_ward.wardProcessing(myHero) if not Menu.IsEnabled(MrGarabato_v1_MenuHx.optionEnable) then return true end     if not Menu.IsEnabled(MrGarabato_v1_MenuHx.EnableVisual) then return end 	if not myHero then return end  	if os.clock() - MrGarabato_v1_ward.wardCaptureTiming < 0.05 then return end 	 	for i = 1, #MrGarabato_v1_ward.NeedPosUpdate do 		MrGarabato_v1_ward.wardProcessingTable[MrGarabato_v1_ward.NeedPosUpdate[i]].pos = MrGarabato_v1_ward.InFront(MrGarabato_v1_ward.wardProcessingTable[MrGarabato_v1_ward.NeedPosUpdate[i]].unit, 350) 		MrGarabato_v1_ward.NeedPosUpdate[i] = nil 	end 	 	for i = 1, Heroes.Count() do 		local heroes = Heroes.Get(i) 		if heroes and Entity.IsHero(heroes) and Entity.IsAlive(heroes) and not Entity.IsDormant(heroes) and not Entity.IsSameTeam(myHero, heroes) and not NPC.IsIllusion(heroes) then 			local sentry = NPC.GetItem(heroes, "item_ward_sentry", true) 			local observer = NPC.GetItem(heroes, "item_ward_observer", true) 			local dispenser = NPC.GetItem(heroes, "item_ward_dispenser", true) 			local sentryStack = 0 			local observerStack = 0 			local ownerID = Entity.GetIndex(heroes) 			if sentry then 				sentryStack = Item.GetCurrentCharges(sentry) 			elseif observer then 				observerStack = Item.GetCurrentCharges(observer) 			elseif dispenser then 				sentryStack = Item.GetSecondaryCharges(dispenser) 				observerStack = Item.GetCurrentCharges(dispenser) 			end  			if sentryStack == 0 and observerStack == 0 then 				if MrGarabato_v1_ward.wardDispenserCount[ownerID] == nil then 					MrGarabato_v1_ward.wardDispenserCount[ownerID] = nil 					MrGarabato_v1_ward.wardCaptureTiming = os.clock() 				else 					if MrGarabato_v1_ward.wardDispenserCount[ownerID]["sentry"] > sentryStack then 						MrGarabato_v1_ward.wardProcessingTable[ownerID + math.floor(GameRules.GetGameTime())] = {type = "sentry", pos = MrGarabato_v1_ward.InFront(heroes, 350), dieTime = math.floor(GameRules.GetGameTime() + 360), unit = heroes} 							if NPC.IsTurning(heroes) then 								table.insert(MrGarabato_v1_ward.NeedPosUpdate, ownerID + math.floor(GameRules.GetGameTime())) 							end 							local mapPing = Particle.Create("particles/ui_mouseactions/ping_enemyward.vpcf", Enum.ParticleAttachment.PATTACH_WORLDORIGIN, heroes) 							Particle.SetControlPoint(mapPing, 0, MrGarabato_v1_ward.InFront(heroes, 350)) 							Particle.SetControlPoint(mapPing, 1, Vector(1,1,1)) 							Particle.SetControlPoint(mapPing, 5, Vector(10,0,0)) 							Engine.ExecuteCommand("play sounds/ui/ping_warning") 						MrGarabato_v1_ward.wardDispenserCount[ownerID] = nil 						MrGarabato_v1_ward.wardCaptureTiming = os.clock() 					elseif MrGarabato_v1_ward.wardDispenserCount[ownerID]["observer"] > sentryStack then 						MrGarabato_v1_ward.wardProcessingTable[ownerID + math.floor(GameRules.GetGameTime())] = {type = "observer", pos = MrGarabato_v1_ward.InFront(heroes, 350), dieTime = math.floor(GameRules.GetGameTime() + 360), unit = heroes} 							if NPC.IsTurning(heroes) then 								table.insert(MrGarabato_v1_ward.NeedPosUpdate, ownerID + math.floor(GameRules.GetGameTime())) 							end 							local mapPing = Particle.Create("particles/ui_mouseactions/ping_enemyward.vpcf", Enum.ParticleAttachment.PATTACH_WORLDORIGIN, heroes) 							Particle.SetControlPoint(mapPing, 0, MrGarabato_v1_ward.InFront(heroes, 350)) 							Particle.SetControlPoint(mapPing, 1, Vector(1,1,1)) 							Particle.SetControlPoint(mapPing, 5, Vector(10,0,0)) 							Engine.ExecuteCommand("play sounds/ui/ping_warning") 						MrGarabato_v1_ward.wardDispenserCount[ownerID] = nil 						MrGarabato_v1_ward.wardCaptureTiming = os.clock() 					end 				end 			end 						 			if MrGarabato_v1_ward.wardDispenserCount[ownerID] == nil then 				if sentryStack > 0 or observerStack > 0 then 					MrGarabato_v1_ward.wardDispenserCount[ownerID] = {sentry = sentryStack, observer = observerStack} 					MrGarabato_v1_ward.wardCaptureTiming = os.clock() 				end 			else 				if MrGarabato_v1_ward.wardDispenserCount[ownerID]["sentry"] < sentryStack then 					MrGarabato_v1_ward.wardDispenserCount[ownerID] = {sentry = sentryStack, observer = observerStack} 					MrGarabato_v1_ward.wardCaptureTiming = os.clock() 				elseif MrGarabato_v1_ward.wardDispenserCount[ownerID]["observer"] < observerStack then 					MrGarabato_v1_ward.wardDispenserCount[ownerID] = {sentry = sentryStack, observer = observerStack} 					MrGarabato_v1_ward.wardCaptureTiming = os.clock() 				elseif MrGarabato_v1_ward.wardDispenserCount[ownerID]["sentry"] > sentryStack then 					MrGarabato_v1_ward.wardProcessingTable[ownerID + math.floor(GameRules.GetGameTime())] = {type = "sentry", pos = MrGarabato_v1_ward.InFront(heroes, 350), dieTime = math.floor(GameRules.GetGameTime() + 360), unit = heroes} 						if NPC.IsTurning(heroes) then 							table.insert(MrGarabato_v1_ward.NeedPosUpdate, ownerID + math.floor(GameRules.GetGameTime())) 						end 						local mapPing = Particle.Create("particles/ui_mouseactions/ping_enemyward.vpcf", Enum.ParticleAttachment.PATTACH_WORLDORIGIN, heroes) 						Particle.SetControlPoint(mapPing, 0, MrGarabato_v1_ward.InFront(heroes, 350)) 						Particle.SetControlPoint(mapPing, 1, Vector(1,1,1)) 						Particle.SetControlPoint(mapPing, 5, Vector(10,0,0)) 						Engine.ExecuteCommand("play sounds/ui/ping_warning") 					MrGarabato_v1_ward.wardDispenserCount[ownerID] = {sentry = sentryStack, observer = observerStack} 					MrGarabato_v1_ward.wardCaptureTiming = os.clock() 				elseif MrGarabato_v1_ward.wardDispenserCount[ownerID]["observer"] > observerStack then 					MrGarabato_v1_ward.wardProcessingTable[ownerID + math.floor(GameRules.GetGameTime())] = {type = "observer", pos = MrGarabato_v1_ward.InFront(heroes, 350), dieTime = math.floor(GameRules.GetGameTime() + 360), unit = heroes} 						if NPC.IsTurning(heroes) then 							table.insert(MrGarabato_v1_ward.NeedPosUpdate, ownerID + math.floor(GameRules.GetGameTime())) 						end 						local mapPing = Particle.Create("particles/ui_mouseactions/ping_enemyward.vpcf", Enum.ParticleAttachment.PATTACH_WORLDORIGIN, heroes) 						Particle.SetControlPoint(mapPing, 0, MrGarabato_v1_ward.InFront(heroes, 350)) 						Particle.SetControlPoint(mapPing, 1, Vector(1,1,1)) 						Particle.SetControlPoint(mapPing, 5, Vector(10,0,0)) 						Engine.ExecuteCommand("play sounds/ui/ping_warning") 					MrGarabato_v1_ward.wardDispenserCount[ownerID] = {sentry = sentryStack, observer = observerStack} 					MrGarabato_v1_ward.wardCaptureTiming = os.clock() 				end 			end 		elseif heroes and Entity.IsHero(heroes) and Entity.IsDormant(heroes) then 			local ownerID = Entity.GetIndex(heroes) 			MrGarabato_v1_ward.wardDispenserCount[ownerID] = nil 			MrGarabato_v1_ward.wardCaptureTiming = os.clock() 		end 	end  	for k, l in pairs(MrGarabato_v1_ward.wardProcessingTable) do 		if l then 			if GameRules.GetGameTime() > l.dieTime then 				MrGarabato_v1_ward.wardProcessingTable[k] = nil 			end	 		end 	end  end  function MrGarabato_v1_ward.drawWard(myHero)  	if not myHero then return end  	if MrGarabato_v1_ward.wardProcessingTable == nil or next(MrGarabato_v1_ward.wardProcessingTable) == nil then return end  	local sentryImageHandle = MrGarabato_v1_ward.sentryImageHandle 		if sentryImageHandle == nil then 			sentryImageHandle = Renderer.LoadImage("panorama\\images\\icon_ward_psd.vtex_c") 			MrGarabato_v1_ward.sentryImageHandle = sentryImageHandle 		end 	local obsImageHandle = MrGarabato_v1_ward.obsImageHandle 		if obsImageHandle == nil then 			obsImageHandle = Renderer.LoadImage("panorama\\images\\icon_ward_psd.vtex_c") 			MrGarabato_v1_ward.obsImageHandle = obsImageHandle 		end  	for i, v in pairs(MrGarabato_v1_ward.wardProcessingTable) do 		if v then 			local type = v.type 			local pos = v.pos 			local dieTime = v.dieTime 			if dieTime > GameRules.GetGameTime() then 				local x, y, visible = Renderer.WorldToScreen(pos) 				visible = (x > 0 and y > 0) and true or false 				local hoveringOver = Input.IsCursorInRect(x - 15, y - 15, 30, 30) 				if visible then 					if type == "sentry" then 						Renderer.SetDrawColor(15, 0, 221, 255) 						Renderer.DrawImage(sentryImageHandle, x - 15, y - 15, 30, 30) 						Renderer.SetDrawColor(255, 255, 255, 255) 						local minutes, sec =    math.modf(math.floor(dieTime - GameRules.GetGameTime())/60) 						Renderer.DrawText(MrGarabato_v1_ward.font, x - 15, y + 15, minutes .. ':' .. math.floor(sec * 60), 0) 					elseif type == "observer" then 						Renderer.SetDrawColor(222, 170, 0, 255) 						Renderer.DrawImage(obsImageHandle, x - 15, y - 15, 30, 30) 						Renderer.SetDrawColor(255, 255, 255, 255) 						local minutes, sec =    math.modf(math.floor(dieTime - GameRules.GetGameTime())/60) 						Renderer.DrawText(MrGarabato_v1_ward.font, x - 15, y + 15, minutes .. ':' .. math.floor(sec * 60), 0) 					end 					if Menu.IsEnabled(MrGarabato_v1_MenuHx.optionWardAwarenessClickRemove) then 						if hoveringOver and Input.IsKeyDownOnce(Enum.ButtonCode.MOUSE_LEFT) and Input.IsKeyDownOnce(Enum.ButtonCode.KEY_LCONTROL) then 							MrGarabato_v1_ward.wardProcessingTable[i] = nil 						end 					end 				end 			end 		end 	end  end return MrGarabato_v1_ward