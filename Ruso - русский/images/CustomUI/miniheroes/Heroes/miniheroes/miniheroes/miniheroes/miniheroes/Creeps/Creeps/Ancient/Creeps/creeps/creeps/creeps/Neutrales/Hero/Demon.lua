local Utility = require("images/CustomUI/miniheroes/Heroes/miniheroes/miniheroes/miniheroes/miniheroes/Creeps/Creeps/Ancient/Creeps/creeps/creeps/creeps/Neutrales/Hero/Key/Utility") local ShadowDemonMrG = {} Log.Write("Loaded script: DemonBeta.lua") Menu.AddMenuIcon({"MrGarabato", " Выбрать героя"}, "panorama/images/heroes/icons/npc_dota_hero_shadow_demon_png.vtex_c") ShadowDemonMrG.poisonKey = Menu.AddKeyOption({"MrGarabato", " Выбрать героя"},"Poison Harass Key",Enum.ButtonCode.KEY_F) Menu.AddOptionIcon(ShadowDemonMrG.poisonKey , "panorama/images/icon_treasure_arrow_psd.vtex_c")  ShadowDemonMrG.optionTarget = Menu.AddOptionSlider({"MrGarabato", " Выбрать героя"}, "Target Radius", 200, 1000, 500)  ShadowDemonMrG.optionTargetStyle = Menu.AddOptionCombo({"MrGarabato", " Выбрать героя" }, "Target Style", {"Free Target", "Lock Target"}, 1) ShadowDemonMrG.AutoKill = Menu.AddOptionBool({  "MrGarabato", " Выбрать героя"}," Auto Kill Poison Release",false) Menu.AddMenuIcon({"MrGarabato", " Выбрать героя","Skill"}, "panorama/images/icon_plus_white_png.vtex_c") ShadowDemonMrG.optionEnableDisruption = Menu.AddOptionBool({  "MrGarabato", " Выбрать героя","Skill"}," Use Disruption",false) Menu.AddOptionIcon(ShadowDemonMrG.optionEnableDisruption, "panorama/images/spellicons/shadow_demon_disruption_png.vtex_c") ShadowDemonMrG.optionEnableCatcher = Menu.AddOptionBool({  "MrGarabato", " Выбрать героя","Skill"}," Use Catcher",false) Menu.AddOptionIcon(ShadowDemonMrG.optionEnableCatcher, "panorama/images/spellicons/shadow_demon_soul_catcher_png.vtex_c") ShadowDemonMrG.optionEnablePoison = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Skill"}," Use Poison",false) Menu.AddOptionIcon(ShadowDemonMrG.optionEnablePoison, "panorama/images/spellicons/shadow_demon_shadow_poison_png.vtex_c") ShadowDemonMrG.optionEnableUlt = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Skill"}," Use Ult",false) Menu.AddOptionIcon(ShadowDemonMrG.optionEnableUlt, "panorama/images/spellicons/shadow_demon_demonic_purge_png.vtex_c") Menu.AddMenuIcon({"MrGarabato", " Выбрать героя","Items"}, "panorama/images/icon_plus_white_png.vtex_c") ShadowDemonMrG.optionSDBlink = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Items"}, " Use Blink to Initiate", false) Menu.AddOptionIcon(ShadowDemonMrG.optionSDBlink, "panorama/images/items/blink_png.vtex_c") ShadowDemonMrG.optionSDBlinkRange = Menu.AddOptionSlider({ "MrGarabato", " Выбрать героя","Items"}, " Set Safe Blink Initiation Range", 200, 800, 25) ShadowDemonMrG.Atos = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Items"}," Use Atos",false) Menu.AddOptionIcon(ShadowDemonMrG.Atos, "panorama/images/items/rod_of_atos_png.vtex_c") ShadowDemonMrG.optionEnableVeil = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Items"}," Use Veil Of Discord",false) Menu.AddOptionIcon(ShadowDemonMrG.optionEnableVeil, "panorama/images/items/veil_of_discord_png.vtex_c") ShadowDemonMrG.optionEnableHex = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Items"}," Use Scythe Of Vyse",false) Menu.AddOptionIcon(ShadowDemonMrG.optionEnableHex, "panorama/images/items/sheepstick_png.vtex_c") ShadowDemonMrG.optionEnableBloth = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Items"}," Use Bloodthorn",false) Menu.AddOptionIcon(ShadowDemonMrG.optionEnableBloth, "panorama/images/items/bloodthorn_png.vtex_c") ShadowDemonMrG.optionEnableEblade = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Items"}," Use Ethereal Blade",false) Menu.AddOptionIcon(ShadowDemonMrG.optionEnableEblade, "panorama/images/items/ethereal_blade_png.vtex_c") ShadowDemonMrG.optionEnableOrchid = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Items"}," Use Orchid Malevolence",false) Menu.AddOptionIcon(ShadowDemonMrG.optionEnableOrchid, "panorama/images/items/orchid_png.vtex_c") ShadowDemonMrG.optionEnableSring = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Items"},"Use Soul Ring",false) Menu.AddOptionIcon(ShadowDemonMrG.optionEnableSring, "panorama/images/items/soul_ring_png.vtex_c") ShadowDemonMrG.optionEnableSguard = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Items"},"Use Shivas Guard",false) Menu.AddOptionIcon(ShadowDemonMrG.optionEnableSguard, "panorama/images/items/shivas_guard_png.vtex_c") ShadowDemonMrG.optionEnableDagon = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Items"},"Use Dagon (Little Lag)",false) Menu.AddOptionIcon(ShadowDemonMrG.optionEnableDagon, "panorama/images/items/dagon_5_png.vtex_c") ShadowDemonMrG.optionEnableEuls = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Items"}," Use Euls",false) Menu.AddOptionIcon(ShadowDemonMrG.optionEnableEuls, "panorama/images/items/cyclone_png.vtex_c") ShadowDemonMrG.optionEnableGlimmer = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Items"}," Use Glimmer Cape",false)  local enemy local myPlayer, myTeam, myMana, myFaction, attackRange, myPos, myBase, enemyBase, enemyPosition  function ShadowDemonMrG.OnUpdate() 	if not Menu.IsEnabled(MrGarabato_v1_MenuHx.optionEnable) then return true end     if not Menu.IsEnabled(MrGarabato_v1_MenuHx.EnableHero) then return end	     local myHero = Heroes.GetLocal()     if not myHero then return end     if NPC.GetUnitName(myHero) ~= "npc_dota_hero_shadow_demon" then return end 	    	myTeam = Entity.GetTeamNum(myHero) 	if myTeam == 2 then  		myBase = Vector(-7328.000000, -6816.000000, 512.000000) 		enemyBase = Vector(7141.750000, 6666.125000, 512.000000) 		myFaction = "radiant" 	else 		myBase = Vector(7141.750000, 6666.125000, 512.000000) 		enemyBase = Vector(-7328.000000, -6816.000000, 512.000000) 		myFaction = "dire" 	end 	enemy = ShadowDemonMrG.Target(myHero) 	if Menu.IsKeyDown(ShadowDemonMrG.poisonKey) then 	    if Menu.GetValue(ShadowDemonMrG.optionTargetStyle) == 1 and not enemy  then 			enemy = Input.GetNearestHeroToCursor(myTeam, Enum.TeamType.TEAM_ENEMY) 		elseif Menu.GetValue(ShadowDemonMrG.optionTargetStyle) == 0 then 			enemy = Input.GetNearestHeroToCursor(myTeam, Enum.TeamType.TEAM_ENEMY) 		end 		if enemy and Entity.IsAlive(enemy) then 			enemyPosition = Entity.GetAbsOrigin(enemy) 			ShadowDemonMrG.Combo2()     enemy = ShadowDemonMrG.Target(myHero) 	end  	end 	if Menu.IsKeyDown(MrGarabato_v1_MenuHx.optionComboKey) then 	    if Menu.GetValue(ShadowDemonMrG.optionTargetStyle) == 1 and not enemy  then 			enemy = Input.GetNearestHeroToCursor(myTeam, Enum.TeamType.TEAM_ENEMY) 		elseif Menu.GetValue(ShadowDemonMrG.optionTargetStyle) == 0 then 			enemy = Input.GetNearestHeroToCursor(myTeam, Enum.TeamType.TEAM_ENEMY) 		end 		if enemy and Entity.IsAlive(enemy) then 			enemyPosition = Entity.GetAbsOrigin(enemy) 			ShadowDemonMrG.Combo() 	enemy = ShadowDemonMrG.Target(myHero)     end  	end           local kaya = NPC.GetItem(myHero, "item_kaya", true)     local kayaAmp = 0     if kaya then       kayaAmp = 10     end 	if Menu.IsEnabled(ShadowDemonMrG.AutoKill) then    local spellAmp = (Hero.GetIntellectTotal(myHero) * 0.06666) + kayaAmp     local Poison = NPC.GetAbility(myHero, "shadow_demon_shadow_poison")     if Poison ~= nil then         for i = 1, NPCs.Count() do             local npc = NPCs.Get(i)             if npc and Entity.GetHealth(npc) > 0 and not Entity.IsSameTeam(myHero, npc) and not NPC.IsIllusion(npc) and (NPC.IsHero(npc) or NPC.HasModifier(npc, "modifier_morphling_replicate_timer")) then                 if NPC.HasModifier(npc, "modifier_shadow_demon_shadow_poison") then                     local poisonMod = NPC.GetModifier(npc, "modifier_shadow_demon_shadow_poison")                     local stacks = Modifier.GetStackCount(poisonMod)                     local stacksDamage = Ability.GetLevelSpecialValueFor(Poison, "stack_damage")                     local stackTalent = NPC.GetAbility(myHero, "special_bonus_unique_shadow_demon_4")                     local bonusDamage = 50                     if Ability.GetLevel(stackTalent) > 0 then                         stacksDamage = stacksDamage + (stacksDamage * .25)                         bonusDamage = 50 + 50 * .25                     end                     local totalStacksDamage = 0                     local stacksToMultiply = stacks                     local multDamage = 1                     if stacks > 5 then                         stacksToMultiply = 5                     end                     stacks = stacks - stacksToMultiply                     if stacksToMultiply == 5 then multDamage = 16 end                     if stacksToMultiply == 4 then multDamage = 8 end                     if stacksToMultiply == 3 then multDamage = 4 end                     if stacksToMultiply == 2 then multDamage = 2 end                     if stacksToMultiply == 1 then multDamage = 1 end                     local multStackDamage = 0                     if stacksToMultiply then                         multStackDamage = (stacksDamage * multDamage) * (1 + spellAmp / 100)                     end                     local bonusStackDamage = 0                     if stacks > 0 then                         bonusStackDamage = (bonusDamage * stacks) * (1 + spellAmp / 100)                     end                     totalStacksDamage = multStackDamage + bonusStackDamage                     local extraDamage = totalStacksDamage                     local ampPercent = 0                     if NPC.HasModifier(npc, "modifier_shadow_demon_soul_catcher") then                         local catcherMod = NPC.GetModifier(npc, "modifier_shadow_demon_soul_catcher")                         local catcherLevel = Ability.GetLevel(NPC.GetAbility(myHero, "shadow_demon_soul_catcher"))                         if catcherLevel > 0 then                             ampPercent = (10 + catcherLevel * 10)                          end                         extraDamage = totalStacksDamage * (1 + ampPercent / 100)                     end                     totalDamage = (1 - NPC.GetMagicalArmorValue(npc)) * (extraDamage)                     if totalDamage > Entity.GetHealth(npc) then                         local release = NPC.GetAbility(myHero, "shadow_demon_shadow_poison_release")                         Ability.CastNoTarget(release)                     end                 end             end         end     end 	end          if not Shadow.PoisonStartCastTime then Shadow.PoisonStartCastTime = 0 end     if not Shadow.PoisonCastPos then Shadow.PoisonCastPos = nil end     if not Shadow.PoisonCastEnemy then Shadow.PoisonCastEnemy = nil end     if GameRules.GetGameTime() - Shadow.PoisonStartCastTime < 0.25 and Shadow.PoisonCastPos and Shadow.PoisonCastEnemy then         if Shadow.PoisonCastEnemy ~= nil and NPC.IsVisible(Shadow.PoisonCastEnemy) then             local speed = 1000             local dis = (Entity.GetAbsOrigin(myHero) - Entity.GetAbsOrigin(Shadow.PoisonCastEnemy)):Length()             local delay = dis / speed              if (Utility.GetPredictedPosition(Shadow.PoisonCastEnemy, delay)-Shadow.PoisonCastPos):Length2D() > 180 then                 Player.HoldPosition(Players.GetLocal(), myHero, false)                 Shadow.PoisonStartCastTime = 0                 Shadow.PoisonCastPos = nil                 Shadow.PoisonCastEnemy = nil                 return             end         end     end end  function ShadowDemonMrG.Combo2() if not Menu.IsKeyDown(ShadowDemonMrG.poisonKey) then return end     local myHero = Heroes.GetLocal()     if NPC.GetUnitName(myHero) ~= "npc_dota_hero_shadow_demon" then return end     enemy = ShadowDemonMrG.Target(myHero)     local heroPos     if enemy ~= nil then         heroPos = Entity.GetAbsOrigin(enemy)     end 	local mousePos = Input.GetWorldCursorPos()     local mana = NPC.GetMana(myHero) 	 	if not enemy then return end 	     local Poison2 = NPC.GetAbility(myHero, "shadow_demon_shadow_poison")          if enemy and not NPC.IsIllusion(enemy) and Utility.CanCastSpellOn(enemy) then end    if Menu.IsEnabled(ShadowDemonMrG.optionEnablePoison) and Poison2 and  Ability.IsCastable(Poison2, mana) and not NPC.IsIllusion(enemy) and heroPos and NPC.IsPositionInRange(myHero, Entity.GetAbsOrigin(enemy), Ability.GetCastRange(Poison2),0) then Ability.CastPosition(Poison2, heroPos) return end    end function ShadowDemonMrG.Combo() if not Menu.IsKeyDown(MrGarabato_v1_MenuHx.optionComboKey) then return end     local myHero = Heroes.GetLocal()     if NPC.GetUnitName(myHero) ~= "npc_dota_hero_shadow_demon" then return end     enemy = ShadowDemonMrG.Target(myHero)     local heroPos     if enemy ~= nil then         heroPos = Entity.GetAbsOrigin(enemy)     end 	local mousePos = Input.GetWorldCursorPos()     local mana = NPC.GetMana(myHero) 	 	if not enemy then return end 	     local Disruption = NPC.GetAbility(myHero, "shadow_demon_disruption")     local Catcher = NPC.GetAbility(myHero, "shadow_demon_soul_catcher")     local Poison = NPC.GetAbility(myHero, "shadow_demon_shadow_poison")     local Ult = NPC.GetAbility(myHero, "shadow_demon_demonic_purge")     local dagon = NPC.GetItem(myHero, "item_dagon", true) 	if not dagon then     for i = 2, 5 do          dagon = NPC.GetItem(myHero, "item_dagon_" .. i, true)       		if dagon then  				break  			end 		end 	end     local Blink  = NPC.GetItem(myHero, "item_blink", true)     local Atos = NPC.GetItem(myHero, "item_rod_of_atos", true)     local Veil  = NPC.GetItem(myHero, "item_veil_of_discord", true)     local Euls = NPC.GetItem(myHero, "item_cyclone", true)     local Glimmer = NPC.GetItem(myHero, "item_glimmer_cape", true) 	local veil = NPC.GetItem(myHero, "item_veil_of_discord", true)     local hex = NPC.GetItem(myHero, "item_sheepstick", true)     local bloth = NPC.GetItem(myHero, "item_bloodthorn", true)     local eblade = NPC.GetItem(myHero, "item_ethereal_blade", true)     local orchid = NPC.GetItem(myHero, "item_orchid", true)     local refresh = NPC.GetItem(myHero, "item_refresher", true)     local RoA = NPC.GetItem(myHero, "item_rod_of_atos", true)     local Sguard = NPC.GetItem(myHero, "item_shivas_guard", true)     local Sring = NPC.GetItem(myHero, "item_soul_ring", true)     local Fstaff = NPC.GetItem(myHero, "item_force_staff", true)     local BladeM = NPC.GetItem(myHero, "item_blade_mail", true)     local Hstaff = NPC.GetItem(myHero, "item_hurricane_pike", true)     local EUL = NPC.GetItem(myHero, "item_cyclone", true)     local shadowblyad = NPC.GetItem(myHero, "item_invis_sword", true)     local silveredge = NPC.GetItem(myHero, "item_silver_edge", true)     local glimmer = NPC.GetItem(myHero, "item_glimmer_cape", true) 	     if enemy and not NPC.IsIllusion(enemy) and Utility.CanCastSpellOn(enemy) then         if Blink and Menu.IsEnabled(ShadowDemonMrG.optionSDBlink) and Ability.IsReady(Blink) and NPC.IsEntityInRange(myHero, enemy, 1150 + Menu.GetValue(ShadowDemonMrG.optionSDBlinkRange)) then             Ability.CastPosition(Blink, (Entity.GetAbsOrigin(enemy) + (Entity.GetAbsOrigin(myHero) - Entity.GetAbsOrigin(enemy)):Normalized():Scaled(Menu.GetValue(ShadowDemonMrG.optionSDBlinkRange)))) return end         end         if Menu.IsEnabled(ShadowDemonMrG.optionEnableSring) and Sring and Ability.IsCastable(Sring, 0) then Ability.CastNoTarget(Sring); return end 		 		if Menu.IsEnabled(ShadowDemonMrG.optionEnableHex) and hex and Ability.IsCastable(hex, mana) and NPC.IsEntityInRange(enemy, myHero, Ability.GetCastRange(hex) - 10) then Ability.CastTarget(hex, enemy); return end                  if Menu.IsEnabled(ShadowDemonMrG.optionEnableBloth) and bloth and Ability.IsCastable(bloth, mana) and NPC.IsEntityInRange(enemy, myHero, Ability.GetCastRange(bloth) - 10) then Ability.CastTarget(bloth, enemy); return end         if Menu.IsEnabled(ShadowDemonMrG.optionEnableOrchid) and orchid and Ability.IsCastable(orchid, mana) and NPC.IsEntityInRange(enemy, myHero, Ability.GetCastRange(orchid) - 10) then Ability.CastTarget(orchid, enemy); return end         if Menu.IsEnabled(ShadowDemonMrG.optionEnableSguard) and Sguard and Ability.IsCastable(Sguard, mana) and NPC.IsEntityInRange(enemy, myHero, Ability.GetCastRange(Sguard) - 10) then Ability.CastNoTarget(Sguard); return end         if Menu.IsEnabled(ShadowDemonMrG.optionEnableDagon) and dagon and Ability.IsCastable(dagon, mana) and NPC.IsEntityInRange(enemy, myHero, Ability.GetCastRange(dagon) - 10) then  Ability.CastTarget(dagon, enemy) return end 		if Menu.IsEnabled(ShadowDemonMrG.optionEnableEblade) and eblade and Ability.IsCastable(eblade, mana) and NPC.IsEntityInRange(enemy, myHero, Ability.GetCastRange(eblade) - 10) then Ability.CastTarget(eblade, enemy); return end 		if Menu.IsEnabled(ShadowDemonMrG.Atos) and Atos and Ability.IsCastable(Atos, mana) and not NPC.IsIllusion(enemy) and not NPC.GetModifier(enemy, "modifier_sheepstick_debuff") and NPC.IsPositionInRange(myHero, Entity.GetAbsOrigin(enemy),Ability.GetCastRange(Atos),0) then Ability.CastTarget(Atos, enemy) return end 		if Menu.IsEnabled(ShadowDemonMrG.optionEnableVeil) and Veil and Ability.IsCastable(Veil, mana) and not NPC.IsIllusion(enemy) and NPC.IsPositionInRange(myHero, Entity.GetAbsOrigin(enemy), Ability.GetCastRange(Veil),0) and heroPos then Ability.CastPosition(Veil, heroPos) return end                  if Menu.IsEnabled(ShadowDemonMrG.optionEnableDisruption) and Disruption and Ability.IsCastable(Disruption, mana) and not NPC.IsIllusion(enemy) and NPC.IsPositionInRange(myHero, Entity.GetAbsOrigin(enemy), Ability.GetCastRange(Disruption),0) then Ability.CastTarget(Disruption, enemy) return end 		if Menu.IsEnabled(ShadowDemonMrG.optionEnableCatcher) and Catcher and Ability.IsCastable(Catcher, mana) and NPC.IsEntityInRange(enemy, myHero, Ability.GetCastRange(Catcher) - 10) then Ability.CastPosition(Catcher, heroPos); return end 		         if Menu.IsEnabled(ShadowDemonMrG.optionEnablePoison) and Poison and  Ability.IsCastable(Poison, mana) and not NPC.IsIllusion(enemy) and heroPos and NPC.IsPositionInRange(myHero, Entity.GetAbsOrigin(enemy), Ability.GetCastRange(Poison),0) then Ability.CastPosition(Poison, heroPos) return end                  if Menu.IsEnabled(ShadowDemonMrG.optionEnableEuls) and Euls and Ability.IsCastable(Euls, mana) and NPC.IsPositionInRange(myHero, Entity.GetAbsOrigin(enemy), Ability.GetCastRange(Euls),0) then Ability.CastTarget(Euls, enemy) return end         if Menu.IsEnabled(ShadowDemonMrG.optionEnableUlt) and Ult and Ability.IsCastable(Ult, mana) and NPC.IsPositionInRange(myHero, Entity.GetAbsOrigin(enemy), Ability.GetCastRange(Ult),0) then Ability.CastTarget(Ult, enemy) return end                  if Menu.IsEnabled(ShadowDemonMrG.optionEnableGlimmer) and Glimmer and Ability.IsCastable(Glimmer, mana) and NPC.IsPositionInRange(myHero, Entity.GetAbsOrigin(enemy), Ability.GetCastRange(Glimmer),0) then Ability.CastTarget(Glimmer, myHero) return end     end function ShadowDemonMrG.Target(myHero)   if not myHero then return end   enemy = Input.GetNearestHeroToCursor(Entity.GetTeamNum(myHero), Enum.TeamType.TEAM_ENEMY)   if not enemy then return end   local targetingRange = Menu.GetValue(ShadowDemonMrG.optionTarget)   local mousePos = Input.GetWorldCursorPos()   local enemyDist = (Entity.GetAbsOrigin(enemy) - mousePos):Length2D()   if enemyDist < targetingRange then      return enemy   else     return mousePos   end end return ShadowDemonMrG