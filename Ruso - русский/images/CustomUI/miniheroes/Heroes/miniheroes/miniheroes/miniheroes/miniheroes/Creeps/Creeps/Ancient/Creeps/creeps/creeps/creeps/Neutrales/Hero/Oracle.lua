 local OracleMrG = {} Log.Write("Loaded script: Oracle.lua") OracleMrG.optionOracleIcon = Menu.AddOptionIcon({"MrGarabato", " Выбрать героя"}, "panorama/images/heroes/icons/npc_dota_hero_oracle_png.vtex_c")  OracleMrG.optionEnabledDamageAghanimOracle = Menu.AddOptionBool({"MrGarabato", " Выбрать героя"}, "Aghanim spam cast", false) OracleMrG.optionEnabledEnable = Menu.AddOptionBool({"MrGarabato", " Выбрать героя" ,"Items"}, "Enable", false) Menu.AddOptionIcon(OracleMrG.optionEnabledEnable, "panorama/images/items/branches_png.vtex_c") Menu.AddMenuIcon({"MrGarabato", " Выбрать героя" ,"Items"}, "panorama/images/icon_plus_white_png.vtex_c") Menu.AddMenuIcon({"MrGarabato", " Выбрать героя" ,"Auto Save"}, "panorama/images/icon_plus_white_png.vtex_c")  OracleMrG.optionSDBlink = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя" ,"Items"}, " Use Blink to Initiate", false) Menu.AddOptionIcon(OracleMrG.optionSDBlink, "panorama/images/items/blink_png.vtex_c") OracleMrG.optionSDBlinkRange = Menu.AddOptionSlider({ "MrGarabato", " Выбрать героя" ,"Items"}, " Set Safe Blink Initiation Range", 200, 800, 25) OracleMrG.Atos = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя" ,"Items"}," Use Atos",false) Menu.AddOptionIcon(OracleMrG.Atos, "panorama/images/items/rod_of_atos_png.vtex_c") OracleMrG.optionEnableVeil = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя" ,"Items"}," Use Veil Of Discord",false) Menu.AddOptionIcon(OracleMrG.optionEnableVeil, "panorama/images/items/veil_of_discord_png.vtex_c") OracleMrG.optionEnableHex = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя" ,"Items"}," Use Scythe Of Vyse",false) Menu.AddOptionIcon(OracleMrG.optionEnableHex, "panorama/images/items/sheepstick_png.vtex_c") OracleMrG.optionEnableBloth = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя" ,"Items"}," Use Bloodthorn",false) Menu.AddOptionIcon(OracleMrG.optionEnableBloth, "panorama/images/items/bloodthorn_png.vtex_c") OracleMrG.optionEnableEblade = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя" ,"Items"}," Use Ethereal Blade",false) Menu.AddOptionIcon(OracleMrG.optionEnableEblade, "panorama/images/items/ethereal_blade_png.vtex_c") OracleMrG.optionEnableOrchid = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя" ,"Items"}," Use Orchid Malevolence",false) Menu.AddOptionIcon(OracleMrG.optionEnableOrchid, "panorama/images/items/orchid_png.vtex_c") OracleMrG.optionEnableSring = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя" ,"Items"},"Use Soul Ring",false) Menu.AddOptionIcon(OracleMrG.optionEnableSring, "panorama/images/items/soul_ring_png.vtex_c") OracleMrG.optionEnableSguard = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя" ,"Items"},"Use Shivas Guard",false) Menu.AddOptionIcon(OracleMrG.optionEnableSguard, "panorama/images/items/shivas_guard_png.vtex_c") OracleMrG.optionEnableDagon = Menu.AddOptionBool({ "MrGarabato", " Выбрать героя","Items"},"Use Dagon (Little Lag)",false) Menu.AddOptionIcon(OracleMrG.optionEnableDagon, "panorama/images/items/dagon_5_png.vtex_c") OracleMrG.optionEnabledAutoSaveOracle = Menu.AddOptionBool({"MrGarabato", " Выбрать героя", "Auto Save"}, "Enabled", false) OracleMrG.optionCountEnemyAutoSaveOracle = Menu.AddOptionSlider({"MrGarabato", " Выбрать героя", "Auto Save"}, "Health percent", 1, 99, 10) local myHero = Heroes.GetLocal() local myPlayer = Players.GetLocal() local TimerWards = 1 local TimerTome = 1 local cheker = 0 local TargetHeal = nil; function OracleMrG.OnUpdate() if not Menu.IsEnabled(MrGarabato_v1_MenuHx.optionEnable) then return true end     if not Menu.IsEnabled(MrGarabato_v1_MenuHx.EnableHero) then return end 		if (NPC.GetUnitName(myHero)=="npc_dota_hero_oracle") and Entity.IsAlive(myHero) then 			Flame = NPC.GetAbility(myHero, "oracle_purifying_flames"); 			Fotuna = NPC.GetAbility(myHero, "oracle_fortunes_end"); 			Promise = NPC.GetAbility(myHero, "oracle_false_promise"); 			Edict = NPC.GetAbility(myHero, "oracle_fates_edict"); 			local dagon = NPC.GetItem(myHero, "item_dagon", true) 	            if not dagon then                 for i = 2, 5 do             dagon = NPC.GetItem(myHero, "item_dagon_" .. i, true)       		if dagon then  				break  			     end 		      end 	        end 	        local Blink  = NPC.GetItem(myHero, "item_blink", true) 	        local Atos = NPC.GetItem(myHero, "item_rod_of_atos", true) 	        local Veil  = NPC.GetItem(myHero, "item_veil_of_discord", true) 	        local Euls = NPC.GetItem(myHero, "item_cyclone", true) 	        local Glimmer = NPC.GetItem(myHero, "item_glimmer_cape", true) 	        local veil = NPC.GetItem(myHero, "item_veil_of_discord", true)  	         local hex = NPC.GetItem(myHero, "item_sheepstick", true) 	        local bloth = NPC.GetItem(myHero, "item_bloodthorn", true) 	         local eblade = NPC.GetItem(myHero, "item_ethereal_blade", true)  	        local orchid = NPC.GetItem(myHero, "item_orchid", true) 	         local refresh = NPC.GetItem(myHero, "item_refresher", true) 	        local RoA = NPC.GetItem(myHero, "item_rod_of_atos", true) 	         local Sguard = NPC.GetItem(myHero, "item_shivas_guard", true) 	        local Sring = NPC.GetItem(myHero, "item_soul_ring", true) 	        local Fstaff = NPC.GetItem(myHero, "item_force_staff", true) 	        local BladeM = NPC.GetItem(myHero, "item_blade_mail", true) 	         local Hstaff = NPC.GetItem(myHero, "item_hurricane_pike", true)  	        local EUL = NPC.GetItem(myHero, "item_cyclone", true) 	        local shadowblyad = NPC.GetItem(myHero, "item_invis_sword", true) 	         local silveredge = NPC.GetItem(myHero, "item_silver_edge", true) 	        local glimmer = NPC.GetItem(myHero, "item_glimmer_cape", true) 			   			if Menu.IsKeyDown(MrGarabato_v1_MenuHx.optionComboKey) then 				target=Input.GetNearestHeroToCursor(Entity.GetTeamNum(myHero), Enum.TeamType.TEAM_ENEMY); 				local heroPos 			    local heroPos  				if target ~= nil then 				heroPos = Entity.GetAbsOrigin(target)  				end 				local mousePos = Input.GetWorldCursorPos() 				local mana = NPC.GetMana(myHero) 				if(Ability.IsReady(Flame)) and (Ability.IsReady(Fotuna)) then 					ethereal = NPC.GetItem(myHero, "item_ethereal_blade"); 					vessel = NPC.GetItem(myHero, "item_spirit_vessel"); 					if ethereal and Ability.IsReady(ethereal) then 						Ability.CastTarget(ethereal,target,true); 					end 					Ability.CastTarget(Flame,target,true); 					Ability.CastTarget(Fotuna,target,true); 					Player.PrepareUnitOrders(myPlayer, Enum.UnitOrder.DOTA_UNIT_ORDER_MOVE_TO_POSITION, nil, Entity.GetOrigin(myHero), nil, Enum.PlayerOrderIssuer.DOTA_ORDER_ISSUER_PASSED_UNIT_ONLY, myHero, false, false) 				end 				 				if(Ability.IsReady(Flame)) and (NPC.GetItem(myHero, "item_ultimate_scepter")) and Menu.IsEnabled(OracleMrG.optionEnabledDamageAghanimOracle) then 					Ability.CastTarget(Flame,target,true); 				end 				if Menu.IsEnabled(OracleMrG.optionEnabledEnable) then 				   if Menu.IsEnabled(OracleMrG.optionEnableBloth) and bloth and Ability.IsCastable(bloth, mana) and NPC.IsEntityInRange(target, myHero, Ability.GetCastRange(bloth) - 10) then Ability.CastTarget(bloth, target); return end 		           if Menu.IsEnabled(OracleMrG.optionEnableOrchid) and orchid and Ability.IsCastable(orchid, mana) and NPC.IsEntityInRange(target, myHero, Ability.GetCastRange(orchid) - 10) then Ability.CastTarget(orchid, target); return end 		           if Menu.IsEnabled(OracleMrG.optionEnableDagon) and dagon and Ability.IsCastable(dagon, mana) and NPC.IsEntityInRange(target, myHero, Ability.GetCastRange(dagon) - 10) then  Ability.CastTarget(dagon, target) return end 		           if Menu.IsEnabled(OracleMrG.optionEnableHex) and hex and Ability.IsCastable(hex, mana) and NPC.IsEntityInRange(target, myHero, Ability.GetCastRange(hex) - 10) then Ability.CastTarget(hex, target); return end 		           if Menu.IsEnabled(OracleMrG.optionEnableSguard) and Sguard and Ability.IsCastable(Sguard, mana) and NPC.IsEntityInRange(target, myHero, Ability.GetCastRange(Sguard) - 10) then Ability.CastNoTarget(Sguard); return end 		           if Menu.IsEnabled(OracleMrG.optionEnableDagon) and dagon and Ability.IsCastable(dagon, mana) and NPC.IsEntityInRange(target, myHero, Ability.GetCastRange(dagon) - 10) then  Ability.CastTarget(dagon, target) return end 		           if Menu.IsEnabled(OracleMrG.optionEnableEblade) and eblade and Ability.IsCastable(eblade, mana) and NPC.IsEntityInRange(target, myHero, Ability.GetCastRange(eblade) - 10) then Ability.CastTarget(eblade, target); return end 		           if Menu.IsEnabled(OracleMrG.Atos) and Atos and Ability.IsCastable(Atos, mana) and not NPC.IsIllusion(target) and not NPC.GetModifier(target, "modifier_sheepstick_debuff") and NPC.IsPositionInRange(myHero, Entity.GetAbsOrigin(target),Ability.GetCastRange(Atos),0) then Ability.CastTarget(Atos, target) return end 		           if Menu.IsEnabled(OracleMrG.optionEnableVeil) and Veil and Ability.IsCastable(Veil, mana) and not NPC.IsIllusion(target) and NPC.IsPositionInRange(myHero, Entity.GetAbsOrigin(target), Ability.GetCastRange(Veil),0) and heroPos then Ability.CastPosition(Veil, heroPos) return end                  end 			end 				Flame = NPC.GetAbility(myHero, "oracle_purifying_flames"); 			    Fotuna = NPC.GetAbility(myHero, "oracle_fortunes_end"); 			    Promise = NPC.GetAbility(myHero, "oracle_false_promise"); 			    Edict = NPC.GetAbility(myHero, "oracle_fates_edict"); 				TeamRadius =  Entity.GetHeroesInRadius(myHero, Ability.GetCastRange(Promise), Enum.TeamType.TEAM_FRIEND); 				if TeamRadius  and (TargetHeal == nil)  then 					OracleMrG.OracleHealTeam(TeamRadius,Edict,Promise,Flame); 				end 				if ((Entity.GetMaxHealth(myHero)*0.01)*Menu.GetValue(OracleMrG.optionCountEnemyHealOracle) >= Entity.GetHealth(myHero)) and Entity.GetHeroesInRadius(myHero, 1000, Enum.TeamType.TEAM_ENEMY) and Ability.IsReady(Promise) then 					TargetHeal = myHero; 					Ability.CastTarget(Promise,TargetHeal,true); 				end 				if TargetHeal and (Ability.SecondsSinceLastUse(Promise) < 9) then 					if Ability.IsReady(Flame) then 						OracleMrG.OracleHealTargetItem(TargetHeal); 						Ability.CastTarget(Flame,TargetHeal,true); 					end 				end 				if (TargetHeal and (Ability.SecondsSinceLastUse(Promise) > 9)) or (Menu.IsKeyDown(OracleMrG.optionEnabledOraclesHealStop)) or (not Entity.IsAlive(TargetHeal)) or (Menu.IsKeyDown(MrGarabato_v1_MenuHx.optionComboKey)) then 					TargetHeal = nil; 				end 			end 			if Menu.IsEnabled(OracleMrG.optionEnabledAutoSaveOracle) then 				TeamRadius =  Entity.GetHeroesInRadius(myHero, Ability.GetCastRange(Edict), Enum.TeamType.TEAM_FRIEND); 				if TeamRadius then 					OracleMrG.OracleSaveTeam(TeamRadius,Edict,Promise,Flame); 				end 				if ((Entity.GetMaxHealth(myHero)*0.01)*Menu.GetValue(OracleMrG.optionCountEnemyAutoSaveOracle) >= Entity.GetHealth(myHero)) and Entity.GetHeroesInRadius(myHero, 1000, Enum.TeamType.TEAM_ENEMY) and Ability.IsReady(Edict) then 					ethereal = NPC.GetItem(myHero, "item_ethereal_blade"); 					Ghost = NPC.GetItem(myHero, "item_ghost"); 					if ethereal and Ability.IsReady(ethereal) then 						Ability.CastTarget(ethereal,myHero,true); 					end 					if Ghost and Ability.IsReady(Ghost) then 						Ability.CastNoTarget(Ghost, true); 					end 					Ability.CastTarget(Edict,myHero,true); 				end 			end 		end  function OracleMrG.OracleSaveTeam(HeroesRadius,Edict,Promise,Flame) 	for i = 1, #HeroesRadius do 		if ((Entity.GetMaxHealth(HeroesRadius[i])*0.01)*Menu.GetValue(OracleMrG.optionCountEnemyAutoSaveOracle) >= Entity.GetHealth(HeroesRadius[i])) and Entity.GetHeroesInRadius(HeroesRadius[i], 1000, Enum.TeamType.TEAM_ENEMY) and Ability.IsReady(Edict) then 			ethereal = NPC.GetItem(myHero, "item_ethereal_blade"); 			if ethereal and Ability.IsReady(ethereal) then 				Ability.CastTarget(ethereal,HeroesRadius[i],true); 			end 			Ability.CastTarget(Edict,HeroesRadius[i],true); 		end 	end end function OracleMrG.OracleHealTeam(HeroesRadius,Edict,Promise,Flame) 	for i = 1, #HeroesRadius do 		if ((Entity.GetMaxHealth(HeroesRadius[i])*0.01)*Menu.GetValue(OracleMrG.optionCountEnemyHealOracle) >= Entity.GetHealth(HeroesRadius[i])) and Entity.GetHeroesInRadius(HeroesRadius[i], 1000, Enum.TeamType.TEAM_ENEMY) and Ability.IsReady(Promise) then 			TargetHeal = HeroesRadius[i]; 			Ability.CastTarget(Promise,TargetHeal,true); 		end 	end end return OracleMrG